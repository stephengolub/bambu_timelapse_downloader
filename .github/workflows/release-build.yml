name: Build Binaries

on:
  release:
    types: [created]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
    defaults:
      run:
        shell: bash

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.11
      uses: actions/setup-python@v3
      with:
        python-version: "3.11"
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
          virtualenvs-create: true
          virtualenvs-in-project: true
    - name: Load cached venv
      id: cached-pip-wheels
      uses: actions/cache@v4
      with:
        path: ~/.cache
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install Dependencies
      run: poetry install --with=build
    - name: Build Binaries
      run: |
        source $VENV
        LDFLAGS="-lsocket" poetry run build
    - name: Rename Artifacts for OS (non-windows)
      if: ${{ ! contains(matrix.os, 'windows') }}
      run: |
        mv dist/bambu_timelapse_downloader dist/bambu-timelapse-downloader-${{ matrix.os }}
    - name: Upload the artifacts (non-windows)
      if: ${{ ! contains(matrix.os, 'windows') }}
      uses: AButler/upload-release-assets@v3.0
      with:
        files: 'dist/bambu-timelapse-downloader-${{ matrix.os }}'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Upload the artifacts (windows)
      if: ${{ contains(matrix.os, 'windows') }}
      uses: AButler/upload-release-assets@v3.0
      with:
        files: 'dist/bambu_timelapse_downloader.exe'
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container Registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  build-alpine-cli:
    runs-on: ubuntu-latest
    needs: build-and-push-image
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
      - name: Build Apline CLI in Docker
        run: |
          docker build --progress=plain -f alpine.Dockerfile -t bambu-alpine .
          mkdir -p dist
          docker run -v "$PWD/dist:/app/dist" bambu-alpine
          mv dist/bambu_timelapse_downloader dist/bambu-timelapse-downloader-alpine
      - name: Upload the artifacts
        uses: AButler/upload-release-assets@v3.0
        with:
          files: 'dist/bambu-timelapse-downloader-alpine'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
